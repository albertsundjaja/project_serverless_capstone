service:
  name: journal-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
provider:
  name: aws
  runtime: nodejs10.x

  tracing:
    lambda: true
    apiGateway: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
      JOURNAL_TABLE: Journal-${self:provider.stage}
      JOURNAL_USERID_INDEX: JournalUserIdIndex
      JOURNAL_CREATEDAT_INDEX: JournalCreatedAtIndex
      USER_USERID_INDEX: UserUserIdIndex
      IMAGES_S3_BUCKET: serverless-journal-alb123123-images-${self:provider.stage}
      SIGNED_URL_EXPIRATION: 300

  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Scan
  #       - dynamodb:PutItem
  #       - dynamodb:GetItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #       - dynamodb:Query
  #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_SECONDARY_INDEX}
  #   - Effect: Allow
  #     Action:
  #       - s3:PutObject
  #       - s3:GetObject
  #     Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todos API
        description: Serverless application for todos
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-model.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-model.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetJournals:
    handler: src/lambda/http/getJournals.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_TABLE}/index/${self:provider.environment.JOURNAL_USERID_INDEX}
    events:
      - http:
          method: get
          path: journals
          cors: true
          authorizer: Auth
  
  # TODO: Configure this function
  GetPubJournals:
    handler: src/lambda/http/getPublicJournals.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_TABLE}/index/${self:provider.environment.JOURNAL_CREATEDAT_INDEX}
    events:
      - http:
          method: get
          path: public-journals
          cors: true

  # TODO: Configure this function
  CreateJournal:
    handler: src/lambda/http/createJournal.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_TABLE}
    events:
      - http:
          method: post
          path: journals
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new journal
            description: Create a new journal
            requestModels:
              'application/json': CreateJournalRequest

  UpdateJournal:
    handler: src/lambda/http/updateJournal.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_TABLE}
    events:
      - http:
          method: patch
          path: journals/{journalId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a journal
            description: Update a journal
            requestModels:
              'application/json': UpdateJournalRequest

  # # TODO: Configure this function
  # DeleteTodo:
  #   handler: src/lambda/http/deleteTodo.handler
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:DeleteItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  #   events:
  #     - http:
  #         method: delete
  #         path: todos/{todoId}
  #         cors: true
  #         authorizer: Auth

  # # TODO: Configure this function
  # GenerateUploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   iamRoleStatements: 
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:UpdateItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  #     - Effect: Allow
  #       Action:
  #         - s3:PutObject
  #         - s3:GetObject
  #       Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
  #   events:
  #     - http:
  #         method: post
  #         cors: true
  #         path: todos/{todoId}/attachment

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    JournalDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: journalId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: journalId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.JOURNAL_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.JOURNAL_USERID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.JOURNAL_CREATEDAT_INDEX}
            KeySchema:
              - AttributeName: createdAt
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # UserDynamoDBTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: userId
    #         AttributeType: S
    #       - AttributeName: createdAt
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: userId
    #         KeyType: HASH
    #       - AttributeName: createdAt
    #         KeyType: RANGE
    #     BillingMode: PAY_PER_REQUEST
    #     TableName: ${self:provider.environment.USER_TABLE}
    #     GlobalSecondaryIndexes:
    #       - IndexName: ${self:provider.environment.USER_USERID_INDEX}
    #         KeySchema:
    #           - AttributeName: userId
    #             KeyType: HASH
    #         Projection:
    #           ProjectionType: ALL

    # UserProfileBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
    #     CorsConfiguration:
    #       CorsRules:
    #         -
    #           AllowedOrigins:
    #             - '*'
    #           AllowedHeaders:
    #             - '*'
    #           AllowedMethods:
    #             - GET
    #             - PUT
    #             - POST
    #             - DELETE
    #             - HEAD
    #           MaxAge: 3000

    # BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     PolicyDocument:
    #       Id: MyPolicy
    #       Version: "2012-10-17"
    #       Statement:
    #         - Sid: PublicReadForGetBucketObjects
    #           Effect: Allow
    #           Principal: '*'
    #           Action: 's3:GetObject'
    #           Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
    #     Bucket: !Ref UserProfileBucket
    